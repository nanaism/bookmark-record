// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

/**
 * ブックマーク管理アプリケーションのデータベーススキーマ
 *
 * トピック（カテゴリ）とブックマークの2つのエンティティで構成されています。
 * 1つのトピックに対して複数のブックマークが関連付けられる1対多の関係です。
 */

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // providerを "sqlite" から "postgresql" に変更
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  // 外部キー制約をDBレベルで持たないDBにも対応できるため、追加を推奨
  relationMode = "prisma"
}

/**
 * トピック（ブックマークのカテゴリ）
 *
 * ブックマークを整理するためのカテゴリ機能を提供します。
 * 各トピックには複数のブックマークを関連付けることができます。
 */
model Topic {
  id          String   @id @default(cuid())
  title       String
  description String?
  emoji       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  order       Int? // 並び順を保存するフィールド


  // リレーション: 1つのトピックに対して複数のブックマーク
  bookmarks Bookmark[]

  // --- 追加: ユーザーとの関連 ---
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/**
 * ブックマーク（保存されたURL）
 *
 * ユーザーが保存したいWebページのURL情報を管理します。
 * 必ずいずれかのトピックに関連付けられます。
 */
model Bookmark {
  id          String   @id @default(cuid())
  url         String
  description String?
  ogTitle     String? // OGPのタイトル
  ogDescription String? // OGPの説明
  ogImage     String? // OGPの画像URL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  isFavorite  Boolean  @default(false)
  
  order       Int? // 並び順を保存するフィールド。nullableにしておくことで既存データに影響を与えない


  // 外部キー: 所属するトピックのID
  topicId String
  // リレーション: トピック削除時にブックマークも自動削除（Cascade）
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  // --- 追加: 投稿者との関連 ---
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

// --- 以下、Auth.js用のモデルをすべて追加 ---

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // --- 追加: Userが作成したTopicとBookmark ---
  topics        Topic[]
  bookmarks     Bookmark[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}