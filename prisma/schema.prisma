// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

/**
 * ブックマーク管理アプリケーションのデータベーススキーマ
 *
 * トピック（カテゴリ）とブックマークの2つのエンティティで構成されています。
 * 1つのトピックに対して複数のブックマークが関連付けられる1対多の関係です。
 */

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // providerを "sqlite" から "postgresql" に変更
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  // 外部キー制約をDBレベルで持たないDBにも対応できるため、追加を推奨
  relationMode = "prisma"
}

// OGP処理ステータスを管理するためのEnum（列挙型）
enum ProcessingStatus {
  PENDING     // 処理待ち
  IN_PROGRESS // 処理中
  COMPLETED   // 完了
  FAILED      // 失敗
}

/**
 * トピック（ブックマークのカテゴリ）
 */
model Topic {
  id          String   @id @default(cuid())
  title       String
  description String?
  emoji       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  order       Int?

  bookmarks Bookmark[]
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/**
 * ブックマーク（保存されたURL）
 */
model Bookmark {
  id               String            @id @default(cuid())
  url              String
  description      String?
  ogTitle          String?
  ogDescription    String?
  ogImage          String?
  isFavorite       Boolean           @default(false)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  order            Int?
  
  // ★★★ この行を追加 ★★★
  processingStatus ProcessingStatus? @default(PENDING)

  topicId String
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

// --- Auth.js用のモデル ---

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  topics        Topic[]
  bookmarks     Bookmark[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}